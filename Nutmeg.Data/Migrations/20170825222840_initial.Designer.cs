// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Nutmeg.Data;
using System;

namespace Nutmeg.Data.Migrations
{
    [DbContext(typeof(NutmegContext))]
    [Migration("20170825222840_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Nutmeg.Data.Action", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<byte>("ActionType");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsEnabled");

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<int>("LimitPerDay");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Points");

                    b.Property<bool>("RequiresVerification");

                    b.Property<int>("ThrottleSeconds");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Action_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Action_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Action_LastModifiedById");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("Nutmeg.Data.AppDictionary", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Key")
                        .HasName("PK_AppDictionary");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("AppDictionary");
                });

            modelBuilder.Entity("Nutmeg.Data.AppNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Details");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRead");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.Property<short>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_AppNotification_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId")
                        .HasName("IX_AppNotification_UserId");

                    b.ToTable("AppNotification");
                });

            modelBuilder.Entity("Nutmeg.Data.Challenge", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<byte>("Type");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Challenge_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Challenge_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Challenge_LastModifiedById");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("Nutmeg.Data.ChallengeAction", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ActionId");

                    b.Property<Guid>("ChallengeId");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ActionId")
                        .HasName("IX_ActionId");

                    b.HasIndex("ChallengeId")
                        .HasName("IX_ChallengeId");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_ChallengeAction_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("ChallengeAction");
                });

            modelBuilder.Entity("Nutmeg.Data.ChallengeLevel", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ChallengeId");

                    b.Property<string>("Description");

                    b.Property<string>("Hyperlink")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LockedIconUrl")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<int>("TriggerPoint");

                    b.Property<byte>("Type");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ChallengeId")
                        .HasName("IX_ChallengeId");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_ChallengeLevel_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("ChallengeLevel");
                });

            modelBuilder.Entity("Nutmeg.Data.Club", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Notes");

                    b.Property<byte>("Type");

                    b.HasKey("Id")
                        .HasName("PK_Club")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Club_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Club_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Club_LastModifiedById");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("Nutmeg.Data.ClubManager", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ClubId");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<byte>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClubId")
                        .HasName("IX_ClubId");

                    b.HasIndex("CreatedById")
                        .HasName("IX_ClubManager_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_ClubManager_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_ClubManager_LastModifiedById");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("ClubManager");
                });

            modelBuilder.Entity("Nutmeg.Data.Coach", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<Guid>("TeamId");

                    b.Property<byte>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Coach_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Coach_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Coach_LastModifiedById");

                    b.HasIndex("TeamId")
                        .HasName("IX_TeamId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("Nutmeg.Data.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Group_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Group_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Group_LastModifiedById");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Nutmeg.Data.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("GroupId");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("GroupId")
                        .HasName("IX_GroupId");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_GroupRole_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.ToTable("GroupRole");
                });

            modelBuilder.Entity("Nutmeg.Data.LogFile", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset?>("ExpiresOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("UploadedOn");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_LogFile_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("LogFile");
                });

            modelBuilder.Entity("Nutmeg.Data.LogFileData", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<byte[]>("FileData")
                        .IsRequired();

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LogFileId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_LogFileData_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LogFileId")
                        .IsUnique()
                        .HasName("IX_LogFileData_LogFileId");

                    b.ToTable("LogFileData");
                });

            modelBuilder.Entity("Nutmeg.Data.NotificationSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<bool>("IncludeApp");

                    b.Property<bool>("IncludeEmail");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_NotificationSubscription_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId")
                        .HasName("IX_NotificationSubscription_UserId");

                    b.ToTable("NotificationSubscription");
                });

            modelBuilder.Entity("Nutmeg.Data.Parent", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ChildUserId");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<Guid>("ParentUserId");

                    b.Property<byte>("Type");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ChildUserId");

                    b.HasIndex("CreatedById")
                        .HasName("IX_Parent_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Parent_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Parent_LastModifiedById");

                    b.HasIndex("ParentUserId");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("Nutmeg.Data.Player", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<Guid>("TeamId");

                    b.Property<byte>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Player_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Player_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Player_LastModifiedById");

                    b.HasIndex("TeamId")
                        .HasName("IX_TeamId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Nutmeg.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedById")
                        .HasName("IX_Role_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Role_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Role_LastModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UX_Role_Name");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Nutmeg.Data.Team", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ClubId");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LastModifiedById");

                    b.Property<DateTimeOffset>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Notes");

                    b.Property<byte>("Type");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClubId")
                        .HasName("IX_ClubId");

                    b.HasIndex("CreatedById")
                        .HasName("IX_Team_CreatedById");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_Team_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LastModifiedById")
                        .HasName("IX_Team_LastModifiedById");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Nutmeg.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(500);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("UX_User_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UX_User_Column");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Nutmeg.Data.UserAction", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ActionId");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Score");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ActionId")
                        .HasName("IX_ActionId");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_UserAction_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserAction");
                });

            modelBuilder.Entity("Nutmeg.Data.UserChallenge", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ChallengeId");

                    b.Property<Guid>("ChallengeLevelId");

                    b.Property<long>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PointsThisWeek");

                    b.Property<int>("PointsTotal");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ChallengeId")
                        .HasName("IX_ChallengeId");

                    b.HasIndex("ChallengeLevelId")
                        .HasName("IX_ChallengeLevelId");

                    b.HasIndex("IndexId")
                        .IsUnique()
                        .HasName("IX_UserChallenge_IndexId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserChallenge");
                });

            modelBuilder.Entity("Nutmeg.Data.VersionHistory", b =>
                {
                    b.Property<string>("Version")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedOn");

                    b.HasKey("Version")
                        .HasName("PK_VersionHistory");

                    b.ToTable("VersionHistory");
                });

            modelBuilder.Entity("Nutmeg.Data.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");


                    b.ToTable("AppRole");

                    b.HasDiscriminator().HasValue("AppRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Nutmeg.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Nutmeg.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nutmeg.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Nutmeg.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nutmeg.Data.Action", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("ActionCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Action_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("ActionLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Action_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.AppDictionary", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("AppDictionaryCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_AppDictionary_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("AppDictionaryLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_AppDictionary_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.AppNotification", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("AppNotification")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AppNotification_UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Challenge", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("ChallengeCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Challenge_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("ChallengeLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Challenge_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.ChallengeAction", b =>
                {
                    b.HasOne("Nutmeg.Data.Action", "Action")
                        .WithMany("ChallengeAction")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_ChallengeAction_Action")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.Challenge", "Challenge")
                        .WithMany("ChallengeAction")
                        .HasForeignKey("ChallengeId")
                        .HasConstraintName("FK_ChallengeAction_Challenge")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.ChallengeLevel", b =>
                {
                    b.HasOne("Nutmeg.Data.Challenge", "Challenge")
                        .WithMany("ChallengeLevel")
                        .HasForeignKey("ChallengeId")
                        .HasConstraintName("FK_ChallengeLevel_Challenge")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Club", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("ClubCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Club_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("ClubLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Club_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.ClubManager", b =>
                {
                    b.HasOne("Nutmeg.Data.Club", "Club")
                        .WithMany("ClubManager")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK_ClubManager_Club")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("ClubManagerCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ClubManager_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("ClubManagerLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_ClubManager_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("ClubManagerUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ClubManager_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Coach", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("CoachCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Coach_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("CoachLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Coach_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.Team", "Team")
                        .WithMany("Coach")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Coach_Team")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("CoachUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Coach_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Group", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("GroupCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Group_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("GroupLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Group_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.GroupRole", b =>
                {
                    b.HasOne("Nutmeg.Data.Group", "Group")
                        .WithMany("GroupRole")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupRole_Group")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.Role", "Role")
                        .WithMany("GroupRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_GroupRole_Role")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.LogFileData", b =>
                {
                    b.HasOne("Nutmeg.Data.LogFile", "LogFile")
                        .WithOne("LogFileData")
                        .HasForeignKey("Nutmeg.Data.LogFileData", "LogFileId")
                        .HasConstraintName("FK_LogFileData_LogFile")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nutmeg.Data.NotificationSubscription", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("NotificationSubscription")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_NotificationSubscription_UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Parent", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "ChildUser")
                        .WithMany("ParentChildUser")
                        .HasForeignKey("ChildUserId")
                        .HasConstraintName("FK_Parent_ChildUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("ParentCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Parent_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("ParentLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Parent_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "ParentUser")
                        .WithMany("ParentParentUser")
                        .HasForeignKey("ParentUserId")
                        .HasConstraintName("FK_Parent_ParentUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Player", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("PlayerCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Player_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("PlayerLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Player_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.Team", "Team")
                        .WithMany("Player")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Player_Team")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("PlayerUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Player_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Role", b =>
                {
                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("RoleCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Role_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("RoleLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Role_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.Team", b =>
                {
                    b.HasOne("Nutmeg.Data.Club", "Club")
                        .WithMany("Team")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK_Team_Club")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "CreatedBy")
                        .WithMany("TeamCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Team_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "LastModifiedBy")
                        .WithMany("TeamLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Team_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.UserAction", b =>
                {
                    b.HasOne("Nutmeg.Data.Action", "Action")
                        .WithMany("UserAction")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_UserAction_Action")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("UserAction")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAction_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nutmeg.Data.UserChallenge", b =>
                {
                    b.HasOne("Nutmeg.Data.Challenge", "Challenge")
                        .WithMany("UserChallenge")
                        .HasForeignKey("ChallengeId")
                        .HasConstraintName("FK_UserChallenge_Challenge")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.ChallengeLevel", "ChallengeLevel")
                        .WithMany("UserChallenge")
                        .HasForeignKey("ChallengeLevelId")
                        .HasConstraintName("FK_UserChallengeLevel_ChallengeLevel")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutmeg.Data.User", "User")
                        .WithMany("UserChallenge")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserChallenge_User")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
